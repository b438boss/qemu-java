package org.anarres.qemu.qapi.api;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonUnwrapped;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import javax.annotation.CheckForNull;
import javax.annotation.Nonnull;
import org.anarres.qemu.qapi.common.*;

/**
 * Autogenerated class.
 *
 * <pre>QApiStructDescriptor{name=MapEntry, data={start=int, length=int, data=bool, zero=bool, depth=int, *offset=int, *filename=str}, innerTypes=null, fields=null, base=null}</pre>
 */
// QApiStructDescriptor{name=MapEntry, data={start=int, length=int, data=bool, zero=bool, depth=int, *offset=int, *filename=str}, innerTypes=null, fields=null, base=null}
@JsonInclude(JsonInclude.Include.NON_EMPTY)
public class MapEntry extends QApiType {

	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("start")
	@Nonnull
	public long start;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("length")
	@Nonnull
	public long length;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("data")
	@Nonnull
	public boolean data;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("zero")
	@Nonnull
	public boolean zero;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("depth")
	@Nonnull
	public long depth;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("offset")
	@CheckForNull
	public java.lang.Long offset;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("filename")
	@CheckForNull
	public java.lang.String filename;

	@Nonnull
	public MapEntry withStart(long value) {
		this.start = value;
		return this;
	}

	@Nonnull
	public MapEntry withLength(long value) {
		this.length = value;
		return this;
	}

	@Nonnull
	public MapEntry withData(boolean value) {
		this.data = value;
		return this;
	}

	@Nonnull
	public MapEntry withZero(boolean value) {
		this.zero = value;
		return this;
	}

	@Nonnull
	public MapEntry withDepth(long value) {
		this.depth = value;
		return this;
	}

	@Nonnull
	public MapEntry withOffset(java.lang.Long value) {
		this.offset = value;
		return this;
	}

	@Nonnull
	public MapEntry withFilename(java.lang.String value) {
		this.filename = value;
		return this;
	}

	public MapEntry() {
	}

	public MapEntry(long start, long length, boolean data, boolean zero, long depth, java.lang.Long offset, java.lang.String filename) {
		this.start = start;
		this.length = length;
		this.data = data;
		this.zero = zero;
		this.depth = depth;
		this.offset = offset;
		this.filename = filename;
	}

	@JsonIgnore
	@Override
	public java.util.List<java.lang.String> getFieldNames() {
		java.util.List<java.lang.String> names = super.getFieldNames();
		names.add("start");
		names.add("length");
		names.add("data");
		names.add("zero");
		names.add("depth");
		names.add("offset");
		names.add("filename");
		return names;
	}

	@Override
	public Object getFieldByName(@Nonnull java.lang.String name) throws NoSuchFieldException {
		if ("start".equals(name))
			return start;
		if ("length".equals(name))
			return length;
		if ("data".equals(name))
			return data;
		if ("zero".equals(name))
			return zero;
		if ("depth".equals(name))
			return depth;
		if ("offset".equals(name))
			return offset;
		if ("filename".equals(name))
			return filename;
		return super.getFieldByName(name);
	}
}
