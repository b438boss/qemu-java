package org.anarres.qemu.qapi.api;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonUnwrapped;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import javax.annotation.CheckForNull;
import javax.annotation.Nonnull;
import org.anarres.qemu.qapi.common.*;

/**
 * Autogenerated class.
 *
 * <pre>QApiTypeDescriptor{name=MigrationParameters, data={compress-level=int, compress-threads=int, decompress-threads=int, x-cpu-throttle-initial=int, x-cpu-throttle-increment=int}, innerTypes=null}</pre>
 */
// QApiTypeDescriptor{name=MigrationParameters, data={compress-level=int, compress-threads=int, decompress-threads=int, x-cpu-throttle-initial=int, x-cpu-throttle-increment=int}, innerTypes=null}
@JsonInclude(JsonInclude.Include.NON_EMPTY)
public class MigrationParameters extends QApiType {

	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("compress-level")
	@Nonnull
	public long compressLevel;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("compress-threads")
	@Nonnull
	public long compressThreads;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("decompress-threads")
	@Nonnull
	public long decompressThreads;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("x-cpu-throttle-initial")
	@Nonnull
	public long xCpuThrottleInitial;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("x-cpu-throttle-increment")
	@Nonnull
	public long xCpuThrottleIncrement;

	@Nonnull
	public MigrationParameters withCompressLevel(long value) {
		this.compressLevel = value;
		return this;
	}

	@Nonnull
	public MigrationParameters withCompressThreads(long value) {
		this.compressThreads = value;
		return this;
	}

	@Nonnull
	public MigrationParameters withDecompressThreads(long value) {
		this.decompressThreads = value;
		return this;
	}

	@Nonnull
	public MigrationParameters withXCpuThrottleInitial(long value) {
		this.xCpuThrottleInitial = value;
		return this;
	}

	@Nonnull
	public MigrationParameters withXCpuThrottleIncrement(long value) {
		this.xCpuThrottleIncrement = value;
		return this;
	}

	public MigrationParameters() {
	}

	public MigrationParameters(long compressLevel, long compressThreads, long decompressThreads, long xCpuThrottleInitial, long xCpuThrottleIncrement) {
		this.compressLevel = compressLevel;
		this.compressThreads = compressThreads;
		this.decompressThreads = decompressThreads;
		this.xCpuThrottleInitial = xCpuThrottleInitial;
		this.xCpuThrottleIncrement = xCpuThrottleIncrement;
	}

	@JsonIgnore
	@Override
	public java.util.List<java.lang.String> getFieldNames() {
		java.util.List<java.lang.String> names = super.getFieldNames();
		names.add("compress-level");
		names.add("compress-threads");
		names.add("decompress-threads");
		names.add("x-cpu-throttle-initial");
		names.add("x-cpu-throttle-increment");
		return names;
	}

	@Override
	public Object getFieldByName(@Nonnull java.lang.String name) throws NoSuchFieldException {
		if ("compress-level".equals(name))
			return compressLevel;
		if ("compress-threads".equals(name))
			return compressThreads;
		if ("decompress-threads".equals(name))
			return decompressThreads;
		if ("x-cpu-throttle-initial".equals(name))
			return xCpuThrottleInitial;
		if ("x-cpu-throttle-increment".equals(name))
			return xCpuThrottleIncrement;
		return super.getFieldByName(name);
	}
}
