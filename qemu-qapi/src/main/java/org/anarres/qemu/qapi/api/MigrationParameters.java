package org.anarres.qemu.qapi.api;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonUnwrapped;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import javax.annotation.CheckForNull;
import javax.annotation.Nonnull;
import org.anarres.qemu.qapi.common.*;

/**
 * Autogenerated class.
 *
 * <pre>QApiStructDescriptor{name=MigrationParameters, data={*compress-level=int, *compress-threads=int, *decompress-threads=int, *cpu-throttle-initial=int, *cpu-throttle-increment=int, *tls-creds=str, *tls-hostname=str, *max-bandwidth=int, *downtime-limit=int, *x-checkpoint-delay=int, *block-incremental=bool}, innerTypes=null, fields=null, base=null}</pre>
 */
// QApiStructDescriptor{name=MigrationParameters, data={*compress-level=int, *compress-threads=int, *decompress-threads=int, *cpu-throttle-initial=int, *cpu-throttle-increment=int, *tls-creds=str, *tls-hostname=str, *max-bandwidth=int, *downtime-limit=int, *x-checkpoint-delay=int, *block-incremental=bool}, innerTypes=null, fields=null, base=null}
@JsonInclude(JsonInclude.Include.NON_EMPTY)
public class MigrationParameters extends QApiType {

	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("compress-level")
	@CheckForNull
	public java.lang.Long compressLevel;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("compress-threads")
	@CheckForNull
	public java.lang.Long compressThreads;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("decompress-threads")
	@CheckForNull
	public java.lang.Long decompressThreads;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("cpu-throttle-initial")
	@CheckForNull
	public java.lang.Long cpuThrottleInitial;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("cpu-throttle-increment")
	@CheckForNull
	public java.lang.Long cpuThrottleIncrement;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("tls-creds")
	@CheckForNull
	public java.lang.String tlsCreds;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("tls-hostname")
	@CheckForNull
	public java.lang.String tlsHostname;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("max-bandwidth")
	@CheckForNull
	public java.lang.Long maxBandwidth;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("downtime-limit")
	@CheckForNull
	public java.lang.Long downtimeLimit;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("x-checkpoint-delay")
	@CheckForNull
	public java.lang.Long xCheckpointDelay;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("block-incremental")
	@CheckForNull
	public java.lang.Boolean blockIncremental;

	@Nonnull
	public MigrationParameters withCompressLevel(java.lang.Long value) {
		this.compressLevel = value;
		return this;
	}

	@Nonnull
	public MigrationParameters withCompressThreads(java.lang.Long value) {
		this.compressThreads = value;
		return this;
	}

	@Nonnull
	public MigrationParameters withDecompressThreads(java.lang.Long value) {
		this.decompressThreads = value;
		return this;
	}

	@Nonnull
	public MigrationParameters withCpuThrottleInitial(java.lang.Long value) {
		this.cpuThrottleInitial = value;
		return this;
	}

	@Nonnull
	public MigrationParameters withCpuThrottleIncrement(java.lang.Long value) {
		this.cpuThrottleIncrement = value;
		return this;
	}

	@Nonnull
	public MigrationParameters withTlsCreds(java.lang.String value) {
		this.tlsCreds = value;
		return this;
	}

	@Nonnull
	public MigrationParameters withTlsHostname(java.lang.String value) {
		this.tlsHostname = value;
		return this;
	}

	@Nonnull
	public MigrationParameters withMaxBandwidth(java.lang.Long value) {
		this.maxBandwidth = value;
		return this;
	}

	@Nonnull
	public MigrationParameters withDowntimeLimit(java.lang.Long value) {
		this.downtimeLimit = value;
		return this;
	}

	@Nonnull
	public MigrationParameters withXCheckpointDelay(java.lang.Long value) {
		this.xCheckpointDelay = value;
		return this;
	}

	@Nonnull
	public MigrationParameters withBlockIncremental(java.lang.Boolean value) {
		this.blockIncremental = value;
		return this;
	}

	public MigrationParameters() {
	}

	public MigrationParameters(java.lang.Long compressLevel, java.lang.Long compressThreads, java.lang.Long decompressThreads, java.lang.Long cpuThrottleInitial, java.lang.Long cpuThrottleIncrement, java.lang.String tlsCreds, java.lang.String tlsHostname, java.lang.Long maxBandwidth, java.lang.Long downtimeLimit, java.lang.Long xCheckpointDelay, java.lang.Boolean blockIncremental) {
		this.compressLevel = compressLevel;
		this.compressThreads = compressThreads;
		this.decompressThreads = decompressThreads;
		this.cpuThrottleInitial = cpuThrottleInitial;
		this.cpuThrottleIncrement = cpuThrottleIncrement;
		this.tlsCreds = tlsCreds;
		this.tlsHostname = tlsHostname;
		this.maxBandwidth = maxBandwidth;
		this.downtimeLimit = downtimeLimit;
		this.xCheckpointDelay = xCheckpointDelay;
		this.blockIncremental = blockIncremental;
	}

	@JsonIgnore
	@Override
	public java.util.List<java.lang.String> getFieldNames() {
		java.util.List<java.lang.String> names = super.getFieldNames();
		names.add("compress-level");
		names.add("compress-threads");
		names.add("decompress-threads");
		names.add("cpu-throttle-initial");
		names.add("cpu-throttle-increment");
		names.add("tls-creds");
		names.add("tls-hostname");
		names.add("max-bandwidth");
		names.add("downtime-limit");
		names.add("x-checkpoint-delay");
		names.add("block-incremental");
		return names;
	}

	@Override
	public Object getFieldByName(@Nonnull java.lang.String name) throws NoSuchFieldException {
		if ("compress-level".equals(name))
			return compressLevel;
		if ("compress-threads".equals(name))
			return compressThreads;
		if ("decompress-threads".equals(name))
			return decompressThreads;
		if ("cpu-throttle-initial".equals(name))
			return cpuThrottleInitial;
		if ("cpu-throttle-increment".equals(name))
			return cpuThrottleIncrement;
		if ("tls-creds".equals(name))
			return tlsCreds;
		if ("tls-hostname".equals(name))
			return tlsHostname;
		if ("max-bandwidth".equals(name))
			return maxBandwidth;
		if ("downtime-limit".equals(name))
			return downtimeLimit;
		if ("x-checkpoint-delay".equals(name))
			return xCheckpointDelay;
		if ("block-incremental".equals(name))
			return blockIncremental;
		return super.getFieldByName(name);
	}
}
