package org.anarres.qemu.qapi.api;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonUnwrapped;
import javax.annotation.CheckForNull;
import javax.annotation.Nonnull;
import org.anarres.qemu.qapi.common.*;

/**
 * Autogenerated class.
 *
 * <pre>QApiTypeDescriptor{name=BlockdevOptionsArchipelago, data={volume=str, *mport=int, *vport=int, *segment=str}, innerTypes=null}</pre>
 */
// QApiTypeDescriptor{name=BlockdevOptionsArchipelago, data={volume=str, *mport=int, *vport=int, *segment=str}, innerTypes=null}
@JsonInclude(JsonInclude.Include.NON_EMPTY)
public class BlockdevOptionsArchipelago extends QApiType {

	@JsonProperty("volume")
	@Nonnull
	public java.lang.String volume;
	@JsonProperty("mport")
	@CheckForNull
	public java.lang.Long mport;
	@JsonProperty("vport")
	@CheckForNull
	public java.lang.Long vport;
	@JsonProperty("segment")
	@CheckForNull
	public java.lang.String segment;

	@Nonnull
	public BlockdevOptionsArchipelago withVolume(java.lang.String value) {
		this.volume = value;
		return this;
	}

	@Nonnull
	public BlockdevOptionsArchipelago withMport(java.lang.Long value) {
		this.mport = value;
		return this;
	}

	@Nonnull
	public BlockdevOptionsArchipelago withVport(java.lang.Long value) {
		this.vport = value;
		return this;
	}

	@Nonnull
	public BlockdevOptionsArchipelago withSegment(java.lang.String value) {
		this.segment = value;
		return this;
	}

	public BlockdevOptionsArchipelago() {
	}

	public BlockdevOptionsArchipelago(java.lang.String volume, java.lang.Long mport, java.lang.Long vport, java.lang.String segment) {
		this.volume = volume;
		this.mport = mport;
		this.vport = vport;
		this.segment = segment;
	}

	@JsonIgnore
	@Override
	public java.util.List<java.lang.String> getFieldNames() {
		java.util.List<java.lang.String> names = super.getFieldNames();
		names.add("volume");
		names.add("mport");
		names.add("vport");
		names.add("segment");
		return names;
	}

	@Override
	public Object getFieldByName(@Nonnull java.lang.String name) throws NoSuchFieldException {
		if ("volume".equals(name))
			return volume;
		if ("mport".equals(name))
			return mport;
		if ("vport".equals(name))
			return vport;
		if ("segment".equals(name))
			return segment;
		return super.getFieldByName(name);
	}
}
