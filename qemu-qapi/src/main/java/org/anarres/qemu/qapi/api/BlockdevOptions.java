package org.anarres.qemu.qapi.api;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonUnwrapped;
import com.fasterxml.jackson.annotation.JsonValue;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import javax.annotation.CheckForNull;
import javax.annotation.Nonnull;
import org.anarres.qemu.qapi.common.*;

/**
 * Autogenerated class.
 *
 * <pre>QApiUnionDescriptor{name=BlockdevOptions, discriminator=driver, data={archipelago=BlockdevOptionsArchipelago, blkdebug=BlockdevOptionsBlkdebug, blkverify=BlockdevOptionsBlkverify, bochs=BlockdevOptionsGenericFormat, cloop=BlockdevOptionsGenericFormat, dmg=BlockdevOptionsGenericFormat, file=BlockdevOptionsFile, ftp=BlockdevOptionsFile, ftps=BlockdevOptionsFile, host_cdrom=BlockdevOptionsFile, host_device=BlockdevOptionsFile, http=BlockdevOptionsFile, https=BlockdevOptionsFile, null-aio=BlockdevOptionsNull, null-co=BlockdevOptionsNull, parallels=BlockdevOptionsGenericFormat, qcow2=BlockdevOptionsQcow2, qcow=BlockdevOptionsGenericCOWFormat, qed=BlockdevOptionsGenericCOWFormat, quorum=BlockdevOptionsQuorum, raw=BlockdevOptionsGenericFormat, tftp=BlockdevOptionsFile, vdi=BlockdevOptionsGenericFormat, vhdx=BlockdevOptionsGenericFormat, vmdk=BlockdevOptionsGenericCOWFormat, vpc=BlockdevOptionsGenericFormat, vvfat=BlockdevOptionsVVFAT}, innerTypes=null, fields=null, discriminatorField=null}</pre>
 */
@JsonInclude(JsonInclude.Include.NON_EMPTY)
public class BlockdevOptions extends BlockdevOptionsBase implements QApiUnion {

	// union {
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("archipelago")
	@JsonUnwrapped
	@CheckForNull
	public BlockdevOptionsArchipelago archipelago;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("blkdebug")
	@JsonUnwrapped
	@CheckForNull
	public BlockdevOptionsBlkdebug blkdebug;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("blkverify")
	@JsonUnwrapped
	@CheckForNull
	public BlockdevOptionsBlkverify blkverify;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("bochs")
	@JsonUnwrapped
	@CheckForNull
	public BlockdevOptionsGenericFormat bochs;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("cloop")
	@JsonUnwrapped
	@CheckForNull
	public BlockdevOptionsGenericFormat cloop;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("dmg")
	@JsonUnwrapped
	@CheckForNull
	public BlockdevOptionsGenericFormat dmg;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("file")
	@JsonUnwrapped
	@CheckForNull
	public BlockdevOptionsFile file;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("ftp")
	@JsonUnwrapped
	@CheckForNull
	public BlockdevOptionsFile ftp;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("ftps")
	@JsonUnwrapped
	@CheckForNull
	public BlockdevOptionsFile ftps;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("host_cdrom")
	@JsonUnwrapped
	@CheckForNull
	public BlockdevOptionsFile hostCdrom;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("host_device")
	@JsonUnwrapped
	@CheckForNull
	public BlockdevOptionsFile hostDevice;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("http")
	@JsonUnwrapped
	@CheckForNull
	public BlockdevOptionsFile http;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("https")
	@JsonUnwrapped
	@CheckForNull
	public BlockdevOptionsFile https;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("null-aio")
	@JsonUnwrapped
	@CheckForNull
	public BlockdevOptionsNull nullAio;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("null-co")
	@JsonUnwrapped
	@CheckForNull
	public BlockdevOptionsNull nullCo;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("parallels")
	@JsonUnwrapped
	@CheckForNull
	public BlockdevOptionsGenericFormat parallels;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("qcow2")
	@JsonUnwrapped
	@CheckForNull
	public BlockdevOptionsQcow2 qcow2;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("qcow")
	@JsonUnwrapped
	@CheckForNull
	public BlockdevOptionsGenericCOWFormat qcow;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("qed")
	@JsonUnwrapped
	@CheckForNull
	public BlockdevOptionsGenericCOWFormat qed;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("quorum")
	@JsonUnwrapped
	@CheckForNull
	public BlockdevOptionsQuorum quorum;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("raw")
	@JsonUnwrapped
	@CheckForNull
	public BlockdevOptionsGenericFormat raw;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("tftp")
	@JsonUnwrapped
	@CheckForNull
	public BlockdevOptionsFile tftp;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("vdi")
	@JsonUnwrapped
	@CheckForNull
	public BlockdevOptionsGenericFormat vdi;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("vhdx")
	@JsonUnwrapped
	@CheckForNull
	public BlockdevOptionsGenericFormat vhdx;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("vmdk")
	@JsonUnwrapped
	@CheckForNull
	public BlockdevOptionsGenericCOWFormat vmdk;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("vpc")
	@JsonUnwrapped
	@CheckForNull
	public BlockdevOptionsGenericFormat vpc;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("vvfat")
	@JsonUnwrapped
	@CheckForNull
	public BlockdevOptionsVVFAT vvfat;
	// }

	@Nonnull
	public static BlockdevOptions archipelago(@Nonnull BlockdevOptionsArchipelago archipelago) {
		BlockdevOptions self = new BlockdevOptions();
		self.driver = BlockdevDriver.archipelago;
		self.archipelago = archipelago;
		return self;
	}

	@Nonnull
	public static BlockdevOptions blkdebug(@Nonnull BlockdevOptionsBlkdebug blkdebug) {
		BlockdevOptions self = new BlockdevOptions();
		self.driver = BlockdevDriver.blkdebug;
		self.blkdebug = blkdebug;
		return self;
	}

	@Nonnull
	public static BlockdevOptions blkverify(@Nonnull BlockdevOptionsBlkverify blkverify) {
		BlockdevOptions self = new BlockdevOptions();
		self.driver = BlockdevDriver.blkverify;
		self.blkverify = blkverify;
		return self;
	}

	@Nonnull
	public static BlockdevOptions bochs(@Nonnull BlockdevOptionsGenericFormat bochs) {
		BlockdevOptions self = new BlockdevOptions();
		self.driver = BlockdevDriver.bochs;
		self.bochs = bochs;
		return self;
	}

	@Nonnull
	public static BlockdevOptions cloop(@Nonnull BlockdevOptionsGenericFormat cloop) {
		BlockdevOptions self = new BlockdevOptions();
		self.driver = BlockdevDriver.cloop;
		self.cloop = cloop;
		return self;
	}

	@Nonnull
	public static BlockdevOptions dmg(@Nonnull BlockdevOptionsGenericFormat dmg) {
		BlockdevOptions self = new BlockdevOptions();
		self.driver = BlockdevDriver.dmg;
		self.dmg = dmg;
		return self;
	}

	@Nonnull
	public static BlockdevOptions file(@Nonnull BlockdevOptionsFile file) {
		BlockdevOptions self = new BlockdevOptions();
		self.driver = BlockdevDriver.file;
		self.file = file;
		return self;
	}

	@Nonnull
	public static BlockdevOptions ftp(@Nonnull BlockdevOptionsFile ftp) {
		BlockdevOptions self = new BlockdevOptions();
		self.driver = BlockdevDriver.ftp;
		self.ftp = ftp;
		return self;
	}

	@Nonnull
	public static BlockdevOptions ftps(@Nonnull BlockdevOptionsFile ftps) {
		BlockdevOptions self = new BlockdevOptions();
		self.driver = BlockdevDriver.ftps;
		self.ftps = ftps;
		return self;
	}

	@Nonnull
	public static BlockdevOptions hostCdrom(@Nonnull BlockdevOptionsFile hostCdrom) {
		BlockdevOptions self = new BlockdevOptions();
		self.driver = BlockdevDriver.host_cdrom;
		self.hostCdrom = hostCdrom;
		return self;
	}

	@Nonnull
	public static BlockdevOptions hostDevice(@Nonnull BlockdevOptionsFile hostDevice) {
		BlockdevOptions self = new BlockdevOptions();
		self.driver = BlockdevDriver.host_device;
		self.hostDevice = hostDevice;
		return self;
	}

	@Nonnull
	public static BlockdevOptions http(@Nonnull BlockdevOptionsFile http) {
		BlockdevOptions self = new BlockdevOptions();
		self.driver = BlockdevDriver.http;
		self.http = http;
		return self;
	}

	@Nonnull
	public static BlockdevOptions https(@Nonnull BlockdevOptionsFile https) {
		BlockdevOptions self = new BlockdevOptions();
		self.driver = BlockdevDriver.https;
		self.https = https;
		return self;
	}

	@Nonnull
	public static BlockdevOptions nullAio(@Nonnull BlockdevOptionsNull nullAio) {
		BlockdevOptions self = new BlockdevOptions();
		self.driver = BlockdevDriver.null_aio;
		self.nullAio = nullAio;
		return self;
	}

	@Nonnull
	public static BlockdevOptions nullCo(@Nonnull BlockdevOptionsNull nullCo) {
		BlockdevOptions self = new BlockdevOptions();
		self.driver = BlockdevDriver.null_co;
		self.nullCo = nullCo;
		return self;
	}

	@Nonnull
	public static BlockdevOptions parallels(@Nonnull BlockdevOptionsGenericFormat parallels) {
		BlockdevOptions self = new BlockdevOptions();
		self.driver = BlockdevDriver.parallels;
		self.parallels = parallels;
		return self;
	}

	@Nonnull
	public static BlockdevOptions qcow2(@Nonnull BlockdevOptionsQcow2 qcow2) {
		BlockdevOptions self = new BlockdevOptions();
		self.driver = BlockdevDriver.qcow2;
		self.qcow2 = qcow2;
		return self;
	}

	@Nonnull
	public static BlockdevOptions qcow(@Nonnull BlockdevOptionsGenericCOWFormat qcow) {
		BlockdevOptions self = new BlockdevOptions();
		self.driver = BlockdevDriver.qcow;
		self.qcow = qcow;
		return self;
	}

	@Nonnull
	public static BlockdevOptions qed(@Nonnull BlockdevOptionsGenericCOWFormat qed) {
		BlockdevOptions self = new BlockdevOptions();
		self.driver = BlockdevDriver.qed;
		self.qed = qed;
		return self;
	}

	@Nonnull
	public static BlockdevOptions quorum(@Nonnull BlockdevOptionsQuorum quorum) {
		BlockdevOptions self = new BlockdevOptions();
		self.driver = BlockdevDriver.quorum;
		self.quorum = quorum;
		return self;
	}

	@Nonnull
	public static BlockdevOptions raw(@Nonnull BlockdevOptionsGenericFormat raw) {
		BlockdevOptions self = new BlockdevOptions();
		self.driver = BlockdevDriver.raw;
		self.raw = raw;
		return self;
	}

	@Nonnull
	public static BlockdevOptions tftp(@Nonnull BlockdevOptionsFile tftp) {
		BlockdevOptions self = new BlockdevOptions();
		self.driver = BlockdevDriver.tftp;
		self.tftp = tftp;
		return self;
	}

	@Nonnull
	public static BlockdevOptions vdi(@Nonnull BlockdevOptionsGenericFormat vdi) {
		BlockdevOptions self = new BlockdevOptions();
		self.driver = BlockdevDriver.vdi;
		self.vdi = vdi;
		return self;
	}

	@Nonnull
	public static BlockdevOptions vhdx(@Nonnull BlockdevOptionsGenericFormat vhdx) {
		BlockdevOptions self = new BlockdevOptions();
		self.driver = BlockdevDriver.vhdx;
		self.vhdx = vhdx;
		return self;
	}

	@Nonnull
	public static BlockdevOptions vmdk(@Nonnull BlockdevOptionsGenericCOWFormat vmdk) {
		BlockdevOptions self = new BlockdevOptions();
		self.driver = BlockdevDriver.vmdk;
		self.vmdk = vmdk;
		return self;
	}

	@Nonnull
	public static BlockdevOptions vpc(@Nonnull BlockdevOptionsGenericFormat vpc) {
		BlockdevOptions self = new BlockdevOptions();
		self.driver = BlockdevDriver.vpc;
		self.vpc = vpc;
		return self;
	}

	@Nonnull
	public static BlockdevOptions vvfat(@Nonnull BlockdevOptionsVVFAT vvfat) {
		BlockdevOptions self = new BlockdevOptions();
		self.driver = BlockdevDriver.vvfat;
		self.vvfat = vvfat;
		return self;
	}

	@Override
	public java.util.List<java.lang.String> getFieldNames() {
		java.util.List<java.lang.String> names = super.getFieldNames();
		names.add("archipelago");
		names.add("blkdebug");
		names.add("blkverify");
		names.add("bochs");
		names.add("cloop");
		names.add("dmg");
		names.add("file");
		names.add("ftp");
		names.add("ftps");
		names.add("host_cdrom");
		names.add("host_device");
		names.add("http");
		names.add("https");
		names.add("null-aio");
		names.add("null-co");
		names.add("parallels");
		names.add("qcow2");
		names.add("qcow");
		names.add("qed");
		names.add("quorum");
		names.add("raw");
		names.add("tftp");
		names.add("vdi");
		names.add("vhdx");
		names.add("vmdk");
		names.add("vpc");
		names.add("vvfat");
		return names;
	}

	@JsonIgnore
	@Override
	public Object getFieldByName(@Nonnull java.lang.String name) throws NoSuchFieldException {
		if ("archipelago".equals(name))
			return archipelago;
		if ("blkdebug".equals(name))
			return blkdebug;
		if ("blkverify".equals(name))
			return blkverify;
		if ("bochs".equals(name))
			return bochs;
		if ("cloop".equals(name))
			return cloop;
		if ("dmg".equals(name))
			return dmg;
		if ("file".equals(name))
			return file;
		if ("ftp".equals(name))
			return ftp;
		if ("ftps".equals(name))
			return ftps;
		if ("host_cdrom".equals(name))
			return hostCdrom;
		if ("host_device".equals(name))
			return hostDevice;
		if ("http".equals(name))
			return http;
		if ("https".equals(name))
			return https;
		if ("null-aio".equals(name))
			return nullAio;
		if ("null-co".equals(name))
			return nullCo;
		if ("parallels".equals(name))
			return parallels;
		if ("qcow2".equals(name))
			return qcow2;
		if ("qcow".equals(name))
			return qcow;
		if ("qed".equals(name))
			return qed;
		if ("quorum".equals(name))
			return quorum;
		if ("raw".equals(name))
			return raw;
		if ("tftp".equals(name))
			return tftp;
		if ("vdi".equals(name))
			return vdi;
		if ("vhdx".equals(name))
			return vhdx;
		if ("vmdk".equals(name))
			return vmdk;
		if ("vpc".equals(name))
			return vpc;
		if ("vvfat".equals(name))
			return vvfat;
		return super.getFieldByName(name);
	}

	@Override
	@JsonIgnore
	public boolean isValidUnion() {
		int count = 0;
		if (archipelago != null)
			count++;
		if (blkdebug != null)
			count++;
		if (blkverify != null)
			count++;
		if (bochs != null)
			count++;
		if (cloop != null)
			count++;
		if (dmg != null)
			count++;
		if (file != null)
			count++;
		if (ftp != null)
			count++;
		if (ftps != null)
			count++;
		if (hostCdrom != null)
			count++;
		if (hostDevice != null)
			count++;
		if (http != null)
			count++;
		if (https != null)
			count++;
		if (nullAio != null)
			count++;
		if (nullCo != null)
			count++;
		if (parallels != null)
			count++;
		if (qcow2 != null)
			count++;
		if (qcow != null)
			count++;
		if (qed != null)
			count++;
		if (quorum != null)
			count++;
		if (raw != null)
			count++;
		if (tftp != null)
			count++;
		if (vdi != null)
			count++;
		if (vhdx != null)
			count++;
		if (vmdk != null)
			count++;
		if (vpc != null)
			count++;
		if (vvfat != null)
			count++;
		return (count == 1);
	}
}
